{"version":3,"file":"app-AJxnhns0.js","sources":["../../../../virtual:nuxt:%2FUsers%2Fdevin%2Frepos%2Fprojects%2Fnuxt-astronaut-theme%2F.nuxt%2Fcontent%2Fmanifest.ts","../../../../node_modules/.pnpm/@nuxt+content@3.6.0_better-sqlite3@11.10.0_magicast@0.3.5/node_modules/@nuxt/content/dist/runtime/internal/query.js","../../../../node_modules/.pnpm/@nuxt+content@3.6.0_better-sqlite3@11.10.0_magicast@0.3.5/node_modules/@nuxt/content/dist/runtime/internal/api.js","../../../../node_modules/.pnpm/@nuxt+content@3.6.0_better-sqlite3@11.10.0_magicast@0.3.5/node_modules/@nuxt/content/dist/runtime/app.js"],"sourcesContent":["export const checksums = {\n  \"shop\": \"v3.5.0--Ucea_VhzW8K0bfxj2LsiaFyPzVhvsmELM6nrtiurzOQ\",\n  \"legal\": \"v3.5.0--IPti5nZTI0U6smx496XB96OzIU9l4u3QBWJj0a2haN0\",\n  \"pages\": \"v3.5.0--9GvnXB2M8pJacIs9Nm51AJ_P1TRTRzKrbrhxuDalUBA\"\n}\nexport const checksumsStructure = {\n  \"shop\": \"E-MnwqDu7doTy41-OWb9ytkF24oLEqY61osUITynI0A\",\n  \"legal\": \"syYEPFnLsJd0IV0LkefZ-T7F8rxEgShlkVEdKVR-uLQ\",\n  \"pages\": \"c2-SFBM2SCXzvLvpJSMcWKJGIoy39ob7pE1FfrQe-yI\"\n}\n\nexport const tables = {\n  \"shop\": \"_content_shop\",\n  \"legal\": \"_content_legal\",\n  \"pages\": \"_content_pages\",\n  \"info\": \"_content_info\"\n}\n\nexport default {\n  \"shop\": {\n    \"type\": \"page\",\n    \"fields\": {\n      \"id\": \"string\",\n      \"title\": \"string\",\n      \"body\": \"json\",\n      \"category\": \"string\",\n      \"description\": \"string\",\n      \"excerpt\": \"string\",\n      \"extension\": \"string\",\n      \"image\": \"string\",\n      \"meta\": \"json\",\n      \"navigation\": \"json\",\n      \"path\": \"string\",\n      \"publishDate\": \"string\",\n      \"seo\": \"json\",\n      \"slug\": \"string\",\n      \"stem\": \"string\"\n    }\n  },\n  \"legal\": {\n    \"type\": \"page\",\n    \"fields\": {\n      \"id\": \"string\",\n      \"title\": \"string\",\n      \"body\": \"json\",\n      \"description\": \"string\",\n      \"excerpt\": \"string\",\n      \"extension\": \"string\",\n      \"meta\": \"json\",\n      \"navigation\": \"json\",\n      \"path\": \"string\",\n      \"publishDate\": \"string\",\n      \"seo\": \"json\",\n      \"stem\": \"string\"\n    }\n  },\n  \"pages\": {\n    \"type\": \"page\",\n    \"fields\": {\n      \"id\": \"string\",\n      \"title\": \"string\",\n      \"body\": \"json\",\n      \"description\": \"string\",\n      \"excerpt\": \"string\",\n      \"extension\": \"string\",\n      \"meta\": \"json\",\n      \"navigation\": \"json\",\n      \"path\": \"string\",\n      \"publishDate\": \"string\",\n      \"seo\": \"json\",\n      \"stem\": \"string\"\n    }\n  },\n  \"info\": {\n    \"type\": \"data\",\n    \"fields\": {}\n  }\n}","import { withoutTrailingSlash } from \"ufo\";\nimport { tables } from \"#content/manifest\";\nconst buildGroup = (group, type) => {\n  const conditions = group._conditions;\n  return conditions.length > 0 ? `(${conditions.join(` ${type} `)})` : \"\";\n};\nexport const collectionQueryGroup = (collection) => {\n  const conditions = [];\n  const query = {\n    // @ts-expect-error -- internal\n    _conditions: conditions,\n    where(field, operator, value) {\n      let condition;\n      switch (operator.toUpperCase()) {\n        case \"IN\":\n        case \"NOT IN\":\n          if (Array.isArray(value)) {\n            const values = value.map((val) => singleQuote(val)).join(\", \");\n            condition = `\"${String(field)}\" ${operator.toUpperCase()} (${values})`;\n          } else {\n            throw new TypeError(`Value for ${operator} must be an array`);\n          }\n          break;\n        case \"BETWEEN\":\n        case \"NOT BETWEEN\":\n          if (Array.isArray(value) && value.length === 2) {\n            condition = `\"${String(field)}\" ${operator.toUpperCase()} ${singleQuote(value[0])} AND ${singleQuote(value[1])}`;\n          } else {\n            throw new Error(`Value for ${operator} must be an array with two elements`);\n          }\n          break;\n        case \"IS NULL\":\n        case \"IS NOT NULL\":\n          condition = `\"${String(field)}\" ${operator.toUpperCase()}`;\n          break;\n        case \"LIKE\":\n        case \"NOT LIKE\":\n          condition = `\"${String(field)}\" ${operator.toUpperCase()} ${singleQuote(value)}`;\n          break;\n        default:\n          condition = `\"${String(field)}\" ${operator} ${singleQuote(typeof value === \"boolean\" ? Number(value) : value)}`;\n      }\n      conditions.push(`${condition}`);\n      return query;\n    },\n    andWhere(groupFactory) {\n      const group = groupFactory(collectionQueryGroup(collection));\n      conditions.push(buildGroup(group, \"AND\"));\n      return query;\n    },\n    orWhere(groupFactory) {\n      const group = groupFactory(collectionQueryGroup(collection));\n      conditions.push(buildGroup(group, \"OR\"));\n      return query;\n    }\n  };\n  return query;\n};\nexport const collectionQueryBuilder = (collection, fetch) => {\n  const params = {\n    conditions: [],\n    selectedFields: [],\n    offset: 0,\n    limit: 0,\n    orderBy: [],\n    // Count query\n    count: {\n      field: \"\",\n      distinct: false\n    }\n  };\n  const query = {\n    // @ts-expect-error -- internal\n    __params: params,\n    andWhere(groupFactory) {\n      const group = groupFactory(collectionQueryGroup(collection));\n      params.conditions.push(buildGroup(group, \"AND\"));\n      return query;\n    },\n    orWhere(groupFactory) {\n      const group = groupFactory(collectionQueryGroup(collection));\n      params.conditions.push(buildGroup(group, \"OR\"));\n      return query;\n    },\n    path(path) {\n      return query.where(\"path\", \"=\", withoutTrailingSlash(path));\n    },\n    skip(skip) {\n      params.offset = skip;\n      return query;\n    },\n    where(field, operator, value) {\n      query.andWhere((group) => group.where(String(field), operator, value));\n      return query;\n    },\n    limit(limit) {\n      params.limit = limit;\n      return query;\n    },\n    select(...fields) {\n      if (fields.length) {\n        params.selectedFields.push(...fields);\n      }\n      return query;\n    },\n    order(field, direction) {\n      params.orderBy.push(`\"${String(field)}\" ${direction}`);\n      return query;\n    },\n    async all() {\n      return fetch(collection, buildQuery()).then((res) => res || []);\n    },\n    async first() {\n      return fetch(collection, buildQuery({ limit: 1 })).then((res) => res[0] || null);\n    },\n    async count(field = \"*\", distinct = false) {\n      return fetch(collection, buildQuery({\n        count: { field: String(field), distinct }\n      })).then((m) => m[0].count);\n    }\n  };\n  function buildQuery(opts = {}) {\n    let query2 = \"SELECT \";\n    if (opts?.count) {\n      query2 += `COUNT(${opts.count.distinct ? \"DISTINCT \" : \"\"}${opts.count.field}) as count`;\n    } else {\n      const fields = Array.from(new Set(params.selectedFields));\n      query2 += fields.length > 0 ? fields.map((f) => `\"${String(f)}\"`).join(\", \") : \"*\";\n    }\n    query2 += ` FROM ${tables[String(collection)]}`;\n    if (params.conditions.length > 0) {\n      query2 += ` WHERE ${params.conditions.join(\" AND \")}`;\n    }\n    if (params.orderBy.length > 0) {\n      query2 += ` ORDER BY ${params.orderBy.join(\", \")}`;\n    } else {\n      query2 += ` ORDER BY stem ASC`;\n    }\n    const limit = opts?.limit || params.limit;\n    if (limit > 0) {\n      if (params.offset > 0) {\n        query2 += ` LIMIT ${limit} OFFSET ${params.offset}`;\n      } else {\n        query2 += ` LIMIT ${limit}`;\n      }\n    }\n    return query2;\n  }\n  return query;\n};\nfunction singleQuote(value) {\n  return `'${String(value).replace(/'/g, \"''\")}'`;\n}\n","import { checksums } from \"#content/manifest\";\nexport async function fetchDatabase(event, collection) {\n  return await $fetch(`/__nuxt_content/${collection}/sql_dump.txt`, {\n    context: event ? { cloudflare: event.context.cloudflare } : {},\n    responseType: \"text\",\n    headers: {\n      \"content-type\": \"text/plain\",\n      ...event?.node?.req?.headers?.cookie ? { cookie: event.node.req.headers.cookie } : {}\n    },\n    query: { v: checksums[String(collection)], t: import.meta.dev ? Date.now() : void 0 }\n  });\n}\nexport async function fetchQuery(event, collection, sql) {\n  return await $fetch(`/__nuxt_content/${collection}/query`, {\n    context: event ? { cloudflare: event.context.cloudflare } : {},\n    headers: {\n      \"content-type\": \"application/json\",\n      ...event?.node?.req?.headers?.cookie ? { cookie: event.node.req.headers.cookie } : {}\n    },\n    query: { v: checksums[String(collection)], t: import.meta.dev ? Date.now() : void 0 },\n    method: \"POST\",\n    body: {\n      sql\n    }\n  });\n}\n","import { collectionQueryBuilder } from \"./internal/query.js\";\nimport { generateNavigationTree } from \"./internal/navigation.js\";\nimport { generateItemSurround } from \"./internal/surround.js\";\nimport { generateSearchSections } from \"./internal/search.js\";\nimport { fetchQuery } from \"./internal/api.js\";\nimport { tryUseNuxtApp } from \"#imports\";\nexport const queryCollection = (collection) => {\n  const event = tryUseNuxtApp()?.ssrContext?.event;\n  return collectionQueryBuilder(collection, (collection2, sql) => executeContentQuery(event, collection2, sql));\n};\nexport function queryCollectionNavigation(collection, fields) {\n  return chainablePromise(collection, (qb) => generateNavigationTree(qb, fields));\n}\nexport function queryCollectionItemSurroundings(collection, path, opts) {\n  return chainablePromise(collection, (qb) => generateItemSurround(qb, path, opts));\n}\nexport function queryCollectionSearchSections(collection, opts) {\n  return chainablePromise(collection, (qb) => generateSearchSections(qb, opts));\n}\nasync function executeContentQuery(event, collection, sql) {\n  if (import.meta.client) {\n    return queryContentSqlClientWasm(collection, sql);\n  } else {\n    return fetchQuery(event, String(collection), sql);\n  }\n}\nasync function queryContentSqlClientWasm(collection, sql) {\n  const rows = await import(\"./internal/database.client.js\").then((m) => m.loadDatabaseAdapter(collection)).then((db) => db.all(sql));\n  return rows;\n}\nfunction chainablePromise(collection, fn) {\n  const queryBuilder = queryCollection(collection);\n  const chainable = {\n    where(field, operator, value) {\n      queryBuilder.where(String(field), operator, value);\n      return chainable;\n    },\n    andWhere(groupFactory) {\n      queryBuilder.andWhere(groupFactory);\n      return chainable;\n    },\n    orWhere(groupFactory) {\n      queryBuilder.orWhere(groupFactory);\n      return chainable;\n    },\n    order(field, direction) {\n      queryBuilder.order(String(field), direction);\n      return chainable;\n    },\n    then(onfulfilled, onrejected) {\n      return fn(queryBuilder).then(onfulfilled, onrejected);\n    },\n    catch(onrejected) {\n      return this.then(void 0, onrejected);\n    },\n    finally(onfinally) {\n      return this.then(void 0, void 0).finally(onfinally);\n    },\n    get [Symbol.toStringTag]() {\n      return \"Promise\";\n    }\n  };\n  return chainable;\n}\n"],"names":[],"mappings":"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","x_google_ignoreList":[1,2,3]}